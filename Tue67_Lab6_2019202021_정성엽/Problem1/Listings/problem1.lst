


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             ARMex,CODE,READONLY
    2 00000000                 ENTRY
    3 00000000         start
    4 00000000 E59F00E0        LDR              R0, FLTPT1  ; 32bit hexadecimal
                                                             floating point num
                                                            ber1
    5 00000004 E59F10E0        LDR              R1, FLTPT2  ; 32bit hexadecimal
                                                             floating point num
                                                            ber2
    6 00000008         
    7 00000008 E1A02080        mov              r2,r0,lsl #1 ; remove sign bit
    8 0000000C E1A02C22        mov              r2,r2,lsr #24 
                                                            ; get exponent bit
    9 00000010         
   10 00000010 E1A03081        mov              r3,r1,lsl #1 ; remove sign bit
   11 00000014 E1A03C23        mov              r3,r3,lsr #24 
                                                            ; get exponent bit
   12 00000018         
   13 00000018 E1A04480        mov              r4,r0,lsl #9 ; remove sign and 
                                                            exponent bit
   14 0000001C E1A044A4        mov              r4,r4,lsr #9 ; get Mantissa bit
                                                            
   15 00000020 E2844502        add              r4,r4,#8388608 ; add 1 all of  
                                                            mantissa bit 
   16 00000024         
   17 00000024 E1A05481        mov              r5,r1,lsl #9 ; remove sign and 
                                                            exponent bit
   18 00000028 E1A054A5        mov              r5,r5,lsr #9 ; get Mantissa bit
                                                            
   19 0000002C E2855502        add              r5,r5,#8388608 ; add 1 all of m
                                                            antissa bit
   20 00000030         
   21 00000030 E1520003        cmp              r2,r3       ; compare exponent 
                                                            bit
   22 00000034 0A000001        BEQ              CHECK       ; if equal goto che
                                                            ck
   23 00000038 CA00000C        BGT              LEFT        ; if r2>r3 goto lef
                                                            t
   24 0000003C BA00000F        BLT              RIGHT       ; if r2<r3 goto rig
                                                            ht
   25 00000040         
   26 00000040         CHECK
   27 00000040 E1A06FA0        MOV              R6, R0, LSR #31 ; get sign bit
   28 00000044 E1A07FA1        MOV              R7, R1, LSR #31 ; get sign bit
   29 00000048 E1560007        cmp              R6, R7      ;compare 2 sign bit
                                                            
   30 0000004C 0A000000        BEQ              EQUAL       ; if equal goto equ
                                                            al
   31 00000050 EA000001        B                NOTEQUAL    ;else goto noteqaul
                                                            
   32 00000054         
   33 00000054         EQUAL
   34 00000054 E084C005        ADD              R12, R4, R5 ;sum of mantissa
   35 00000058 EA00000C        B                NORMAL      ;goto normalize
   36 0000005C         
   37 0000005C         NOTEQUAL
   38 0000005C E1540005        cmp              r4,r5       ; compare mantissa
   39 00000060 C044C005        SUBGT            R12, r4,r5  ; if r4>r5 r12=r4-r
                                                            5



ARM Macro Assembler    Page 2 


   40 00000064 B1A06007        MOVLT            R6, R7      ; if r4<r5 change s
                                                            ign bit like r7
   41 00000068 B045C004        SUBLT            R12, r5,r4  ; if r4<r5 r12=r5-r
                                                            4
   42 0000006C EA000007        B                NORMAL      ; goto normalize
   43 00000070         
   44 00000070         LEFT
   45 00000070 E042A003        sub              r10, r2,r3  ; r10=r2-r3
   46 00000074 E1A05A35        LSR              r5, r10     ;shift to right 
   47 00000078 E1A0D002        MOV              R13, r2     ;R13=r2 exponent
   48 0000007C EAFFFFEF        B                CHECK       ;goto check
   49 00000080         
   50 00000080         RIGHT
   51 00000080 E043A002        sub              r10, r3,r2  ; r10=r3-r2
   52 00000084 E1A04A34        LSR              r4,r10      ;shift to right
   53 00000088 E1A0D003        MOV              R13, r3     ;R13=r3 exponent
   54 0000008C EAFFFFEB        B                CHECK       ;goto check
   55 00000090         
   56 00000090         NORMAL
   57 00000090 E35C0000        cmp              R12, #0     ; compare R12 and 0
                                                            
   58 00000094 0A000007        BEQ              FINISH      ; if equal goto fin
                                                            ish
   59 00000098         
   60 00000098 E35C060F        cmp              R12, #15728640 ;if over
   61 0000009C C1A0C0AC        LSRGT            R12, #1     ;shift to right 
   62 000000A0 C28DD001        ADDGT            r13, r13, #1 
                                                            ;plus 1 to exponent
                                                            
   63 000000A4 CAFFFFF9        BGT              NORMAL      ;return to normaliz
                                                            e
   64 000000A8         
   65 000000A8 E35C0502        cmp              R12, #8388608 ;if under
   66 000000AC B1A0C08C        LSLLT            R12, #1     ;shift to left
   67 000000B0 B24DD001        SUBLT            r13, r13, #1 ;minus 1 to expone
                                                            nt
   68 000000B4 BAFFFFF5        BLT              NORMAL      ;return to normaliz
                                                            e
   69 000000B8         
   70 000000B8         FINISH
   71 000000B8 E1A0DB8D        LSL              r13, #23    ;shift to left expo
                                                            nent
   72 000000BC E35C0000        cmp              R12, #0     ;check exponent zer
                                                            o
   73 000000C0 0A000005        BEQ              RESULT      ;if equal goto resu
                                                            lt
   74 000000C4         
   75 000000C4 124CC502        SUBNE            R12, #8388608 ;minus 1 all of m
                                                            antissa bit
   76 000000C8         
   77 000000C8 E08CC00D        ADD              R12, R12, r13 ;add mantissa and
                                                             exponent
   78 000000CC         
   79 000000CC E35C0000        cmp              R12, #0     ;chech exception
   80 000000D0 0A000001        BEQ              RESULT      ;if equal goto resu
                                                            lt
   81 000000D4         
   82 000000D4 E3560000        cmp              R6, #0      ; if R6>0 check sig
                                                            n bit



ARM Macro Assembler    Page 3 


   83 000000D8 C28CC102        ADDGT            R12, 0x80000000 ; minus bit
   84 000000DC         
   85 000000DC         RESULT
   86 000000DC E59FB000        LDR              R11, TEMPADDR1 ;load tempaddr1 
                                                            address
   87 000000E0 E58BC000        STR              R12,[R11]   ;store result
   88 000000E4         
   89 000000E4         
   90 000000E4         
   91 000000E4         
   92 000000E4         
   93 000000E4         
   94 000000E4 00040000 
                       TEMPADDR1
                               &                &00040000
   95 000000E8         ;+ +
   96 000000E8         ;FLTPT1 DCD 0x3FC00000;1.5
   97 000000E8         ;FLTPT2 DCD 0x40500000;3.25
   98 000000E8         
   99 000000E8         ;- - 
  100 000000E8         ;FLTPT1 DCD 0xC1240000;-10.25
  101 000000E8         ;FLTPT2 DCD 0xC26C0000; -59
  102 000000E8         
  103 000000E8         ;+ -
  104 000000E8         ;FLTPT1 DCD 0x3FC00000;1.5
  105 000000E8         ;FLTPT2 DCD 0xC1240000; -10.25
  106 000000E8         
  107 000000E8         ;- +
  108 000000E8         ;FLTPT1 DCD 0xC26C0000; -59
  109 000000E8         ;FLTPT2 DCD 0x40500000;3.25
  110 000000E8         
  111 000000E8         ;same num
  112 000000E8 426C0000 
                       FLTPT1  DCD              0x426C0000  ; 59
  113 000000EC C26C0000 
                       FLTPT2  DCD              0xC26C0000  ; -59
  114 000000F0                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\problem1.d -o.\objects\problem1.o -IC:\Keil_v5\ARM\RV31\INC 
-IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 529" --list=.\listings\problem1.lst Problem1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARMex 00000000

Symbol: ARMex
   Definitions
      At line 1 in file Problem1.s
   Uses
      None
Comment: ARMex unused
CHECK 00000040

Symbol: CHECK
   Definitions
      At line 26 in file Problem1.s
   Uses
      At line 22 in file Problem1.s
      At line 48 in file Problem1.s
      At line 54 in file Problem1.s

EQUAL 00000054

Symbol: EQUAL
   Definitions
      At line 33 in file Problem1.s
   Uses
      At line 30 in file Problem1.s
Comment: EQUAL used once
FINISH 000000B8

Symbol: FINISH
   Definitions
      At line 70 in file Problem1.s
   Uses
      At line 58 in file Problem1.s
Comment: FINISH used once
FLTPT1 000000E8

Symbol: FLTPT1
   Definitions
      At line 112 in file Problem1.s
   Uses
      At line 4 in file Problem1.s
Comment: FLTPT1 used once
FLTPT2 000000EC

Symbol: FLTPT2
   Definitions
      At line 113 in file Problem1.s
   Uses
      At line 5 in file Problem1.s
Comment: FLTPT2 used once
LEFT 00000070

Symbol: LEFT
   Definitions
      At line 44 in file Problem1.s
   Uses
      At line 23 in file Problem1.s
Comment: LEFT used once
NORMAL 00000090



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: NORMAL
   Definitions
      At line 56 in file Problem1.s
   Uses
      At line 35 in file Problem1.s
      At line 42 in file Problem1.s
      At line 63 in file Problem1.s
      At line 68 in file Problem1.s

NOTEQUAL 0000005C

Symbol: NOTEQUAL
   Definitions
      At line 37 in file Problem1.s
   Uses
      At line 31 in file Problem1.s
Comment: NOTEQUAL used once
RESULT 000000DC

Symbol: RESULT
   Definitions
      At line 85 in file Problem1.s
   Uses
      At line 73 in file Problem1.s
      At line 80 in file Problem1.s

RIGHT 00000080

Symbol: RIGHT
   Definitions
      At line 50 in file Problem1.s
   Uses
      At line 24 in file Problem1.s
Comment: RIGHT used once
TEMPADDR1 000000E4

Symbol: TEMPADDR1
   Definitions
      At line 94 in file Problem1.s
   Uses
      At line 86 in file Problem1.s
Comment: TEMPADDR1 used once
start 00000000

Symbol: start
   Definitions
      At line 3 in file Problem1.s
   Uses
      None
Comment: start unused
13 symbols
345 symbols in table
